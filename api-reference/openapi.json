{
  "openapi": "3.0.3",
  "info": {
    "title": "Cheqi API",
    "description": "API for digital receipts management",
    "version": "1.0.0",
    "contact": {
      "name": "Cheqi Support",
      "email": "support@cheqi.io"
    }
  },
  "servers": [
    {
      "url": "https://api.cheqi.io",
      "description": "Production server"
    },
    {
      "url": "https://test.api.cheqi.io",
      "description": "Test server"
    }
  ],
  "tags": [
    {
      "name": "Receipts",
      "description": "Operations related to digital receipts"
    },
    {
      "name": "Webhooks",
      "description": "Webhook subscription and management"
    },
    {
      "name": "OAuth",
      "description": "OAuth2 authentication and authorization"
    }
  ],
  "paths": {
    "/receipt": {
      "post": {
        "tags": ["Receipts"],
        "summary": "Add a new receipt",
        "description": "Add a new digital receipt (requires authentication)",
        "operationId": "addReceipt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Receipt created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized - Bearer token missing or invalid"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/webhook/subscription": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Subscribe to webhooks",
        "description": "Subscribe to webhook events (requires authentication)",
        "operationId": "handleWebhook",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook subscription successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized - Bearer token missing or invalid"
          },
          "409": {
            "description": "Duplicate subscription"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth2/authorize": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Authorize OAuth request",
        "description": "Initiate OAuth authorization flow (requires authentication). Creates an authorization request and redirects to the approval page.",
        "operationId": "authorize",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The client application identifier"
          },
          {
            "name": "scope",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Space-separated list of requested scopes"
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "CSRF protection state parameter"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "URI to redirect to after authorization"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to authorization page with requestId",
            "headers": {
              "Location": {
                "description": "URL to the authorization page",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "401": {
            "description": "Unauthorized - Bearer token missing or invalid"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth2/token": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Get OAuth token",
        "description": "Public endpoint to exchange authorization code for access token",
        "operationId": "getToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": []
      }
    },
    "/oauth2/refresh": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Refresh OAuth token",
        "description": "Public endpoint to refresh an expired access token",
        "operationId": "getRefreshToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Server-side authentication token"
      }
    },
    "schemas": {
      "ReceiptRequestBody": {
        "type": "object",
        "required": [
          "receiptId",
          "issueDate",
          "documentCurrencyCode",
          "paymentDetails",
          "invoiceSubtotal",
          "totalBeforeTax",
          "totalAmount",
          "products"
        ],
        "properties": {
          "receiptId": {
            "type": "string",
            "description": "An unique receipt identifier provided by the selling party"
          },
          "issueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the purchase receipt was issued"
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the purchase transaction was initiated. Only needed when the transaction date is different from the issue date"
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the purchase was made. Only needed when the purchase date is different from the issue date"
          },
          "note": {
            "type": "string",
            "description": "A note that the seller wants to include on the purchase receipt"
          },
          "documentCurrencyCode": {
            "type": "string",
            "description": "The currency in which the purchase receipt is issued"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetailsDTO"
          },
          "consumerPartyEmail": {
            "type": "string",
            "description": "The email address of the consumer party. This will be used when no PAR is provided"
          },
          "invoiceSubtotal": {
            "type": "number",
            "format": "decimal",
            "description": "The subtotal of the invoice, calculated as the sum of all line items before any overall invoice-level adjustments or taxes"
          },
          "totalBeforeTax": {
            "type": "number",
            "format": "decimal",
            "description": "The total amount of the invoice excluding taxes, but including any overall discounts or charges"
          },
          "totalAmount": {
            "type": "number",
            "format": "decimal",
            "description": "The total amount is the amount charged to the customer. So totalBeforeTax + taxes = totalAmount"
          },
          "taxBreakDown": {
            "$ref": "#/components/schemas/TaxBreakDown"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDTO"
            },
            "description": "The list of products that are included in the purchase receipt"
          }
        }
      },
      "ReceiptResponseBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the receipt"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "The invoice number of the receipt"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the receipt was created"
          },
          "receipt": {
            "type": "object",
            "description": "The actual receipt data"
          }
        }
      },
      "PaymentDetailsDTO": {
        "type": "object",
        "required": ["paymentType"],
        "properties": {
          "card": {
            "$ref": "#/components/schemas/CardDTO"
          },
          "paymentType": {
            "type": "string",
            "enum": ["CARD", "IBAN"],
            "description": "Type of payment"
          },
          "iban": {
            "type": "string",
            "description": "IBAN for bank transfer payments"
          },
          "paymentId": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of payment identifiers"
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the payment has been completed"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Payment amount"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant identifier"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction identifier"
          },
          "authorzationId": {
            "type": "string",
            "description": "Authorization identifier"
          }
        }
      },
      "TaxBreakDown": {
        "type": "object",
        "required": ["taxTotal"],
        "properties": {
          "taxTotal": {
            "type": "number",
            "format": "decimal",
            "description": "Total tax amount"
          },
          "taxSubtotals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxSubTotalDTO"
            },
            "description": "List of tax subtotals"
          }
        }
      },
      "ProductDTO": {
        "type": "object",
        "required": [
          "productName",
          "brandName",
          "articleNumber",
          "invoicedQuantity",
          "listPrice",
          "lineTotal"
        ],
        "properties": {
          "productName": {
            "type": "string",
            "description": "Name of the product"
          },
          "brandName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Brand name(s) of the product"
          },
          "productDescription": {
            "type": "string",
            "description": "Description of the product"
          },
          "articleNumber": {
            "type": "string",
            "description": "Unique identifier of the product"
          },
          "invoicedQuantity": {
            "$ref": "#/components/schemas/QuantityDTO"
          },
          "listPrice": {
            "$ref": "#/components/schemas/ItemPriceDTO"
          },
          "lineSubtotal": {
            "type": "number",
            "format": "decimal",
            "description": "Subtotal for this line (invoicedQuantity * listPrice + totalAllowanceCharges)"
          },
          "lineTotal": {
            "type": "number",
            "format": "decimal",
            "description": "Total amount charged to the customer (lineSubtotal + taxes)"
          },
          "taxRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRateDTO"
            },
            "description": "List of tax rates applied to the product"
          },
          "allowanceCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowanceChargeDTO"
            },
            "description": "Allowance charges for the product (discounts or extra charges)"
          },
          "itemClassifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemClassificationDTO"
            },
            "description": "List of item classifications assigned to the product"
          },
          "currency": {
            "type": "string",
            "description": "Currency for the product"
          },
          "note": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional information provided by the seller"
          },
          "totalAllowanceCharges": {
            "type": "number",
            "format": "decimal",
            "description": "Total sum of allowance charges applied to the product"
          }
        }
      },
      "CardDTO": {
        "type": "object",
        "required": [
          "cardProvider",
          "paymentAccountReference",
          "cardType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the card"
          },
          "iban": {
            "type": "string",
            "description": "IBAN associated with the card"
          },
          "primaryAccountNumber": {
            "type": "string",
            "description": "Primary account number of the card"
          },
          "cardProvider": {
            "type": "string",
            "description": "Provider of the card"
          },
          "paymentAccountReference": {
            "type": "string",
            "description": "Payment account reference"
          },
          "cardType": {
            "type": "string",
            "description": "Type of the card"
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "description": "Company identifier associated with the card"
          },
          "expMonth": {
            "type": "integer",
            "description": "Expiration month of the card"
          },
          "expYear": {
            "type": "integer",
            "description": "Expiration year of the card"
          },
          "paymentAccountId": {
            "type": "string",
            "format": "uuid",
            "description": "Payment account identifier"
          },
          "cardholderName": {
            "type": "string",
            "description": "Name of the cardholder"
          }
        }
      },
      "TaxSubTotalDTO": {
        "type": "object",
        "required": [
          "taxableAmount",
          "taxAmount"
        ],
        "properties": {
          "taxableAmount": {
            "type": "number",
            "format": "decimal",
            "description": "Total sum of invoice line items subject to taxation under a specific tax rate"
          },
          "taxAmount": {
            "type": "number",
            "format": "decimal",
            "description": "Total tax amount calculated based on the taxable amount and tax rate"
          },
          "id": {
            "type": "string",
            "description": "Tax category according to UNCL5305"
          },
          "percent": {
            "type": "number",
            "format": "double",
            "description": "Tax rate in percent"
          },
          "taxScheme": {
            "type": "string",
            "default": "VAT",
            "description": "Tax scheme (e.g., VAT, GST)"
          },
          "taxExemptionReasonCode": {
            "type": "string",
            "description": "Code of the tax exemption reason"
          },
          "taxExemptionReason": {
            "type": "string",
            "description": "Reason for the tax exemption"
          }
        }
      },
      "QuantityDTO": {
        "type": "object",
        "required": [
          "quantity",
          "unitCode"
        ],
        "properties": {
          "quantity": {
            "type": "number",
            "format": "decimal",
            "description": "Quantity value"
          },
          "unitCode": {
            "type": "string",
            "description": "Unit code according to UNECERec20 (e.g., C62 for pieces)"
          }
        }
      },
      "ItemPriceDTO": {
        "type": "object",
        "required": [
          "priceAmount",
          "baseQuantity"
        ],
        "properties": {
          "priceAmount": {
            "type": "number",
            "format": "decimal",
            "description": "Price of the product after subtracting item price level discounts"
          },
          "baseQuantity": {
            "$ref": "#/components/schemas/QuantityDTO"
          },
          "allowanceCharge": {
            "$ref": "#/components/schemas/AllowanceChargeDTO"
          }
        }
      },
      "TaxRateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tax ID according to UNCL5305"
          },
          "percentage": {
            "type": "number",
            "format": "double",
            "description": "Tax rate percentage"
          },
          "taxName": {
            "type": "string",
            "description": "Name of the tax"
          },
          "totalTaxAmount": {
            "type": "number",
            "format": "decimal",
            "description": "Total tax amount"
          },
          "taxScheme": {
            "type": "string",
            "default": "VAT",
            "description": "Tax scheme (e.g., VAT, GST)"
          }
        }
      },
      "AllowanceChargeDTO": {
        "type": "object",
        "required": ["chargeIndicator"],
        "properties": {
          "chargeIndicator": {
            "type": "boolean",
            "description": "Indicates if it's a charge (true) or allowance/discount (false)"
          },
          "allowanceChargeReasonCode": {
            "type": "string",
            "description": "Reason code for the allowance or charge according to UNCL5189/UNCL7161"
          },
          "allowanceChargeReason": {
            "type": "string",
            "description": "Textual reason for the allowance or charge"
          },
          "percentage": {
            "type": "number",
            "format": "double",
            "description": "Percentage used to calculate the allowance or charge amount"
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount of the allowance or charge, without VAT"
          }
        }
      },
      "ItemClassificationDTO": {
        "type": "object",
        "required": [
          "listId",
          "value"
        ],
        "properties": {
          "listId": {
            "type": "string",
            "description": "Classification list identifier (e.g., EAN codes)"
          },
          "value": {
            "type": "string",
            "description": "Classification value"
          }
        }
      },
      "WebhookRequestBody": {
        "type": "object",
        "properties": {}
      },
      "WebhookResponse": {
        "type": "object",
        "properties": {}
      },
      "OAuthTokenRequest": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": ["authorization_code", "refresh_token"]
          },
          "code": {
            "type": "string",
            "description": "Authorization code (for authorization_code grant)"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token (for refresh_token grant)"
          },
          "client_id": {
            "type": "string",
            "description": "Client application identifier"
          }
        }
      },
      "OAuthTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access token for API calls"
          },
          "token_type": {
            "type": "string",
            "enum": ["Bearer"]
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiration time in seconds"
          },
          "refresh_token": {
            "type": "string",
            "description": "Token used to obtain new access tokens"
          },
          "scope": {
            "type": "string",
            "description": "Space-separated list of granted scopes"
          }
        }
      }
    }
  }
} 